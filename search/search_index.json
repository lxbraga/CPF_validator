{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CPF Validator The CPF Validator is a simple app to validate CPF numbers. The group members are: D\u00e1vila Meireles Eduardo Adame Salles Lucas Braga William Sena Installation We recommend you to use poetry to install the dependencies. poetry install And then you might want to run the app with: poetry run python app/main.py If you want to run the tests, you can do it with: poetry run coverage run -m pytest poetry run coverage report -m If you're not using poetry, you can install the dependencies from the requirements.txt file. Project layout app # The app folder cpf_validator.py # The CPF validator module main.py # The main module docs about.md # The about page index.md # The index page mkdocs.yml # The mkdocs configuration file poetry.lock # The poetry lock file pyproject.toml # The poetry configuration file README.md # The README file requirements.txt # The requirements file tests # The tests folder test_cpf_validator.py # The tests for the CPF validator module API Reference CPF Represents a Brazilian CPF (Cadastro de Pessoas F\u00edsicas). Handles CPF formatting and validation. Attributes: raw_cpf ( str ) \u2013 The raw CPF string. formatter ( CPFFormatter ) \u2013 The formatter object responsible for CPF formatting. validator ( CPFValidator ) \u2013 The validator object responsible for CPF validation. cpf ( str ) \u2013 The formatted CPF string. Methods: Name Description is_valid Checks if the CPF is valid using the provided validator. Source code in app/cpf_validator.py class CPF: \"\"\" Represents a Brazilian CPF (Cadastro de Pessoas F\u00edsicas). Handles CPF formatting and validation. Attributes: raw_cpf (str): The raw CPF string. formatter (CPFFormatter): The formatter object responsible for CPF formatting. validator (CPFValidator): The validator object responsible for CPF validation. cpf (str): The formatted CPF string. Methods: is_valid: Checks if the CPF is valid using the provided validator. \"\"\" def __init__( self, cpf_string: str, formatter: CPFFormatter, validator: CPFValidator ): \"\"\" Initializes the CPF object with a raw CPF string, a formatter, and a validator. Args: cpf_string (str): The raw CPF string. formatter (CPFFormatter): The formatter object responsible for CPF formatting. validator (CPFValidator): The validator object responsible for CPF validation. \"\"\" self.raw_cpf = cpf_string self.formatter = formatter self.validator = validator self.cpf = self.formatter.format(cpf_string) def is_valid(self) -> bool: \"\"\" Checks if the CPF is valid using the provided validator. Returns: bool: True if the CPF is valid, False otherwise. \"\"\" return self.validator.validate(self.cpf) __init__(cpf_string, formatter, validator) Initializes the CPF object with a raw CPF string, a formatter, and a validator. Parameters: cpf_string ( str ) \u2013 The raw CPF string. formatter ( CPFFormatter ) \u2013 The formatter object responsible for CPF formatting. validator ( CPFValidator ) \u2013 The validator object responsible for CPF validation. Source code in app/cpf_validator.py def __init__( self, cpf_string: str, formatter: CPFFormatter, validator: CPFValidator ): \"\"\" Initializes the CPF object with a raw CPF string, a formatter, and a validator. Args: cpf_string (str): The raw CPF string. formatter (CPFFormatter): The formatter object responsible for CPF formatting. validator (CPFValidator): The validator object responsible for CPF validation. \"\"\" self.raw_cpf = cpf_string self.formatter = formatter self.validator = validator self.cpf = self.formatter.format(cpf_string) is_valid() Checks if the CPF is valid using the provided validator. Returns: bool ( bool ) \u2013 True if the CPF is valid, False otherwise. Source code in app/cpf_validator.py def is_valid(self) -> bool: \"\"\" Checks if the CPF is valid using the provided validator. Returns: bool: True if the CPF is valid, False otherwise. \"\"\" return self.validator.validate(self.cpf) CPFFormatter Handles CPF string formatting. Methods: Name Description format Formats the CPF string by removing non-numeric characters. Source code in app/cpf_validator.py class CPFFormatter: \"\"\" Handles CPF string formatting. Methods: format: Formats the CPF string by removing non-numeric characters. \"\"\" @staticmethod def format(cpf_string: str) -> str: \"\"\"Formats the CPF string by removing non-numeric characters. Args: cpf_string (str): The CPF string to be formatted. Returns: str: The formatted CPF string with only numeric characters. \"\"\" return re.sub(r\"[^\\d]\", \"\", cpf_string) format(cpf_string) staticmethod Formats the CPF string by removing non-numeric characters. Parameters: cpf_string ( str ) \u2013 The CPF string to be formatted. Returns: str ( str ) \u2013 The formatted CPF string with only numeric characters. Source code in app/cpf_validator.py @staticmethod def format(cpf_string: str) -> str: \"\"\"Formats the CPF string by removing non-numeric characters. Args: cpf_string (str): The CPF string to be formatted. Returns: str: The formatted CPF string with only numeric characters. \"\"\" return re.sub(r\"[^\\d]\", \"\", cpf_string) CPFValidator Validates a CPF using a set of rules. Attributes: rules ( list ) \u2013 A list of validation rules to be applied. Methods: Name Description validate Validates the CPF by applying all the rules. Source code in app/cpf_validator.py class CPFValidator: \"\"\" Validates a CPF using a set of rules. Attributes: rules (list): A list of validation rules to be applied. Methods: validate: Validates the CPF by applying all the rules. \"\"\" def __init__(self): \"\"\"Initializes with a list of validation rules.\"\"\" self.rules = [FormatRule(), DigitRule()] def validate(self, cpf: str) -> bool: \"\"\" Validates the CPF by applying all the rules. Args: cpf (str): The CPF to be validated. Returns: bool: True if all rules are satisfied, False otherwise. \"\"\" return all(rule.validate(cpf) for rule in self.rules) __init__() Initializes with a list of validation rules. Source code in app/cpf_validator.py def __init__(self): \"\"\"Initializes with a list of validation rules.\"\"\" self.rules = [FormatRule(), DigitRule()] validate(cpf) Validates the CPF by applying all the rules. Parameters: cpf ( str ) \u2013 The CPF to be validated. Returns: bool ( bool ) \u2013 True if all rules are satisfied, False otherwise. Source code in app/cpf_validator.py def validate(self, cpf: str) -> bool: \"\"\" Validates the CPF by applying all the rules. Args: cpf (str): The CPF to be validated. Returns: bool: True if all rules are satisfied, False otherwise. \"\"\" return all(rule.validate(cpf) for rule in self.rules) DigitRule Validates the CPF digits. Methods: Name Description calculate_digit Calculates a CPF digit using a given factor. validate Validates the CPF digits. Source code in app/cpf_validator.py class DigitRule: \"\"\" Validates the CPF digits. Methods: calculate_digit: Calculates a CPF digit using a given factor. validate: Validates the CPF digits. \"\"\" @staticmethod def calculate_digit(cpf: str, factor: int) -> int: \"\"\" Calculates a CPF digit using a given factor. Args: cpf (str): The CPF number. factor (int): The factor used in the calculation. Returns: int: The calculated CPF digit. \"\"\" sum_digits = sum( int(digit) * factor for digit, factor in zip(cpf, range(factor, 1, -1)) ) return (sum_digits * 10) % 11 @staticmethod def validate(cpf: str) -> bool: \"\"\" Validates the CPF digits. Args: cpf (str): The CPF number. Returns: bool: True if the CPF digits are valid, False otherwise. \"\"\" digit1 = DigitRule.calculate_digit(cpf, 10) digit1 = 0 if digit1 == 10 else digit1 digit2 = DigitRule.calculate_digit(cpf[:9] + str(digit1), 11) digit2 = 0 if digit2 == 10 else digit2 return str(digit1) == cpf[9] and str(digit2) == cpf[10] calculate_digit(cpf, factor) staticmethod Calculates a CPF digit using a given factor. Parameters: cpf ( str ) \u2013 The CPF number. factor ( int ) \u2013 The factor used in the calculation. Returns: int ( int ) \u2013 The calculated CPF digit. Source code in app/cpf_validator.py @staticmethod def calculate_digit(cpf: str, factor: int) -> int: \"\"\" Calculates a CPF digit using a given factor. Args: cpf (str): The CPF number. factor (int): The factor used in the calculation. Returns: int: The calculated CPF digit. \"\"\" sum_digits = sum( int(digit) * factor for digit, factor in zip(cpf, range(factor, 1, -1)) ) return (sum_digits * 10) % 11 validate(cpf) staticmethod Validates the CPF digits. Parameters: cpf ( str ) \u2013 The CPF number. Returns: bool ( bool ) \u2013 True if the CPF digits are valid, False otherwise. Source code in app/cpf_validator.py @staticmethod def validate(cpf: str) -> bool: \"\"\" Validates the CPF digits. Args: cpf (str): The CPF number. Returns: bool: True if the CPF digits are valid, False otherwise. \"\"\" digit1 = DigitRule.calculate_digit(cpf, 10) digit1 = 0 if digit1 == 10 else digit1 digit2 = DigitRule.calculate_digit(cpf[:9] + str(digit1), 11) digit2 = 0 if digit2 == 10 else digit2 return str(digit1) == cpf[9] and str(digit2) == cpf[10] FormatRule Validates the CPF format. Methods: Name Description validate Checks the length and character repetition in the CPF. Source code in app/cpf_validator.py class FormatRule: \"\"\" Validates the CPF format. Methods: validate: Checks the length and character repetition in the CPF. \"\"\" @staticmethod def validate(cpf: str) -> bool: \"\"\"Checks the length and character repetition in the CPF. Args: cpf (str): The CPF to be validated. Returns: bool: True if the CPF format is valid, False otherwise. \"\"\" if len(cpf) != 11 or cpf == cpf[0] * len(cpf): return False return True validate(cpf) staticmethod Checks the length and character repetition in the CPF. Parameters: cpf ( str ) \u2013 The CPF to be validated. Returns: bool ( bool ) \u2013 True if the CPF format is valid, False otherwise. Source code in app/cpf_validator.py @staticmethod def validate(cpf: str) -> bool: \"\"\"Checks the length and character repetition in the CPF. Args: cpf (str): The CPF to be validated. Returns: bool: True if the CPF format is valid, False otherwise. \"\"\" if len(cpf) != 11 or cpf == cpf[0] * len(cpf): return False return True Tests Reference This module contains the tests for the cpf_validator module. format_cpf(cpf) Formats a CPF (Brazilian identification number) by adding dots and dashes. Parameters: cpf ( str ) \u2013 The CPF to be formatted. Returns: str ( str ) \u2013 The formatted CPF with dots and dashes. Source code in tests/test_cpf_validator.py def format_cpf(cpf) -> str: \"\"\" Formats a CPF (Brazilian identification number) by adding dots and dashes. Args: cpf (str): The CPF to be formatted. Returns: str: The formatted CPF with dots and dashes. \"\"\" return f\"{cpf[:3]}.{cpf[3:6]}.{cpf[6:9]}-{cpf[9:]}\" generate_random_cpf() Generate a random CPF (Cadastro de Pessoas F\u00edsicas) number. Returns: str ( str ) \u2013 A randomly generated CPF number. Source code in tests/test_cpf_validator.py def generate_random_cpf() -> str: \"\"\" Generate a random CPF (Cadastro de Pessoas F\u00edsicas) number. Returns: str: A randomly generated CPF number. \"\"\" return str(random.randint(int(10e10), int(10e11) - 1)) test_cpf_formatting() Test the formatting of a CPF number. This function generates a random CPF number using the generate_random_cpf function, formats it using the format_cpf function, and then checks if the formatted CPF matches the expected format. The expected format of a CPF is \"XXX.XXX.XXX-XX\", where each X represents a digit of the CPF. Raises: AssertionError \u2013 If the formatted CPF does not match the expected format. Source code in tests/test_cpf_validator.py def test_cpf_formatting(): \"\"\" Test the formatting of a CPF number. This function generates a random CPF number using the `generate_random_cpf` function, formats it using the `format_cpf` function, and then checks if the formatted CPF matches the expected format. The expected format of a CPF is \"XXX.XXX.XXX-XX\", where each X represents a digit of the CPF. Raises: AssertionError: If the formatted CPF does not match the expected format. \"\"\" random_cpf = generate_random_cpf() formatted_cpf = format_cpf(random_cpf) assert ( formatted_cpf == f\"{random_cpf[:3]}.{random_cpf[3:6]}.{random_cpf[6:9]}-{random_cpf[9:]}\" ) test_digit_rule() Test the DigitRule class of the cpf_validator module. This function tests the validate() method of the DigitRule class by providing valid and invalid CPF numbers and asserting the expected results. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_digit_rule(): \"\"\" Test the DigitRule class of the cpf_validator module. This function tests the validate() method of the DigitRule class by providing valid and invalid CPF numbers and asserting the expected results. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" digit_rule = cpf_validator.DigitRule() # Teste com CPF v\u00e1lido assert digit_rule.validate(\"12345678909\") is True # Teste com CPF inv\u00e1lido (d\u00edgitos errados) assert digit_rule.validate(\"12345678900\") is False test_format_rule() Test the FormatRule class of the cpf_validator module. This function tests the validate() method of the FormatRule class by providing valid and invalid CPF numbers as input and asserting the expected results. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_format_rule(): \"\"\" Test the FormatRule class of the cpf_validator module. This function tests the validate() method of the FormatRule class by providing valid and invalid CPF numbers as input and asserting the expected results. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" format_rule = cpf_validator.FormatRule() # Teste com CPF v\u00e1lido assert format_rule.validate(\"12345678909\") is True # Teste com CPF inv\u00e1lido (comprimento errado) assert format_rule.validate(\"1234567890\") is False test_invalid_cpf_validation() Test case to validate the behavior of the CPF class when an invalid CPF is provided. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_invalid_cpf_validation(): \"\"\" Test case to validate the behavior of the CPF class when an invalid CPF is provided. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" invalid_cpf = cpf_validator.CPF( \"123.456.789-00\", cpf_validator.CPFFormatter(), cpf_validator.CPFValidator() ) invalid_cpf.cpf = invalid_cpf.cpf[:-1] assert invalid_cpf.is_valid() is False test_invalid_length_cpf_validation() Test case to validate the behavior of CPF validation when the CPF has an invalid length. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_invalid_length_cpf_validation(): \"\"\" Test case to validate the behavior of CPF validation when the CPF has an invalid length. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" invalid_length_cpf = cpf_validator.CPF( \"123.456.789-00\", cpf_validator.CPFFormatter(), cpf_validator.CPFValidator() ) invalid_length_cpf.cpf = invalid_length_cpf.cpf[:-1] assert invalid_length_cpf.is_valid() is False test_unexpected_formatting() Test the CPF class of the cpf_validator module with unexpected formatting. This function tests the behavior of the CPF class when a CPF number with unexpected formatting is provided. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_unexpected_formatting(): \"\"\" Test the CPF class of the cpf_validator module with unexpected formatting. This function tests the behavior of the CPF class when a CPF number with unexpected formatting is provided. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" cpf_digits = \"12345678909\" positions = [i for i in range(11) if random.random() > 0.5] for i, position in enumerate(positions): cpf_entry = cpf_digits[:position + i] + random.choice([\".\", \"-\", \"+\", \" \"]) + cpf_digits[position + i:] cpf = cpf_validator.CPF(cpf_entry, cpf_validator.CPFFormatter(), cpf_validator.CPFValidator()) assert cpf.is_valid() is True test_valid_cpf_validation() Test case to validate a valid CPF. This test case creates a CPF object with a valid CPF number and checks if it is considered valid. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_valid_cpf_validation(): \"\"\" Test case to validate a valid CPF. This test case creates a CPF object with a valid CPF number and checks if it is considered valid. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" valid_cpf = cpf_validator.CPF( \"123.456.789-09\", cpf_validator.CPFFormatter(), cpf_validator.CPFValidator() ) assert valid_cpf.is_valid() is True test_valid_length_cpf_validation() Test case to verify the validation of a CPF with a valid length. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_valid_length_cpf_validation(): \"\"\" Test case to verify the validation of a CPF with a valid length. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" valid_length_cpf = cpf_validator.CPF( \"123.456.789-09\", cpf_validator.CPFFormatter(), cpf_validator.CPFValidator() ) assert valid_length_cpf.is_valid() is True","title":"Home"},{"location":"#welcome-to-cpf-validator","text":"The CPF Validator is a simple app to validate CPF numbers. The group members are: D\u00e1vila Meireles Eduardo Adame Salles Lucas Braga William Sena","title":"Welcome to CPF Validator"},{"location":"#installation","text":"We recommend you to use poetry to install the dependencies. poetry install And then you might want to run the app with: poetry run python app/main.py If you want to run the tests, you can do it with: poetry run coverage run -m pytest poetry run coverage report -m If you're not using poetry, you can install the dependencies from the requirements.txt file.","title":"Installation"},{"location":"#project-layout","text":"app # The app folder cpf_validator.py # The CPF validator module main.py # The main module docs about.md # The about page index.md # The index page mkdocs.yml # The mkdocs configuration file poetry.lock # The poetry lock file pyproject.toml # The poetry configuration file README.md # The README file requirements.txt # The requirements file tests # The tests folder test_cpf_validator.py # The tests for the CPF validator module","title":"Project layout"},{"location":"#api-reference","text":"","title":"API Reference"},{"location":"#app.cpf_validator.CPF","text":"Represents a Brazilian CPF (Cadastro de Pessoas F\u00edsicas). Handles CPF formatting and validation. Attributes: raw_cpf ( str ) \u2013 The raw CPF string. formatter ( CPFFormatter ) \u2013 The formatter object responsible for CPF formatting. validator ( CPFValidator ) \u2013 The validator object responsible for CPF validation. cpf ( str ) \u2013 The formatted CPF string. Methods: Name Description is_valid Checks if the CPF is valid using the provided validator. Source code in app/cpf_validator.py class CPF: \"\"\" Represents a Brazilian CPF (Cadastro de Pessoas F\u00edsicas). Handles CPF formatting and validation. Attributes: raw_cpf (str): The raw CPF string. formatter (CPFFormatter): The formatter object responsible for CPF formatting. validator (CPFValidator): The validator object responsible for CPF validation. cpf (str): The formatted CPF string. Methods: is_valid: Checks if the CPF is valid using the provided validator. \"\"\" def __init__( self, cpf_string: str, formatter: CPFFormatter, validator: CPFValidator ): \"\"\" Initializes the CPF object with a raw CPF string, a formatter, and a validator. Args: cpf_string (str): The raw CPF string. formatter (CPFFormatter): The formatter object responsible for CPF formatting. validator (CPFValidator): The validator object responsible for CPF validation. \"\"\" self.raw_cpf = cpf_string self.formatter = formatter self.validator = validator self.cpf = self.formatter.format(cpf_string) def is_valid(self) -> bool: \"\"\" Checks if the CPF is valid using the provided validator. Returns: bool: True if the CPF is valid, False otherwise. \"\"\" return self.validator.validate(self.cpf)","title":"CPF"},{"location":"#app.cpf_validator.CPF.__init__","text":"Initializes the CPF object with a raw CPF string, a formatter, and a validator. Parameters: cpf_string ( str ) \u2013 The raw CPF string. formatter ( CPFFormatter ) \u2013 The formatter object responsible for CPF formatting. validator ( CPFValidator ) \u2013 The validator object responsible for CPF validation. Source code in app/cpf_validator.py def __init__( self, cpf_string: str, formatter: CPFFormatter, validator: CPFValidator ): \"\"\" Initializes the CPF object with a raw CPF string, a formatter, and a validator. Args: cpf_string (str): The raw CPF string. formatter (CPFFormatter): The formatter object responsible for CPF formatting. validator (CPFValidator): The validator object responsible for CPF validation. \"\"\" self.raw_cpf = cpf_string self.formatter = formatter self.validator = validator self.cpf = self.formatter.format(cpf_string)","title":"__init__()"},{"location":"#app.cpf_validator.CPF.is_valid","text":"Checks if the CPF is valid using the provided validator. Returns: bool ( bool ) \u2013 True if the CPF is valid, False otherwise. Source code in app/cpf_validator.py def is_valid(self) -> bool: \"\"\" Checks if the CPF is valid using the provided validator. Returns: bool: True if the CPF is valid, False otherwise. \"\"\" return self.validator.validate(self.cpf)","title":"is_valid()"},{"location":"#app.cpf_validator.CPFFormatter","text":"Handles CPF string formatting. Methods: Name Description format Formats the CPF string by removing non-numeric characters. Source code in app/cpf_validator.py class CPFFormatter: \"\"\" Handles CPF string formatting. Methods: format: Formats the CPF string by removing non-numeric characters. \"\"\" @staticmethod def format(cpf_string: str) -> str: \"\"\"Formats the CPF string by removing non-numeric characters. Args: cpf_string (str): The CPF string to be formatted. Returns: str: The formatted CPF string with only numeric characters. \"\"\" return re.sub(r\"[^\\d]\", \"\", cpf_string)","title":"CPFFormatter"},{"location":"#app.cpf_validator.CPFFormatter.format","text":"Formats the CPF string by removing non-numeric characters. Parameters: cpf_string ( str ) \u2013 The CPF string to be formatted. Returns: str ( str ) \u2013 The formatted CPF string with only numeric characters. Source code in app/cpf_validator.py @staticmethod def format(cpf_string: str) -> str: \"\"\"Formats the CPF string by removing non-numeric characters. Args: cpf_string (str): The CPF string to be formatted. Returns: str: The formatted CPF string with only numeric characters. \"\"\" return re.sub(r\"[^\\d]\", \"\", cpf_string)","title":"format()"},{"location":"#app.cpf_validator.CPFValidator","text":"Validates a CPF using a set of rules. Attributes: rules ( list ) \u2013 A list of validation rules to be applied. Methods: Name Description validate Validates the CPF by applying all the rules. Source code in app/cpf_validator.py class CPFValidator: \"\"\" Validates a CPF using a set of rules. Attributes: rules (list): A list of validation rules to be applied. Methods: validate: Validates the CPF by applying all the rules. \"\"\" def __init__(self): \"\"\"Initializes with a list of validation rules.\"\"\" self.rules = [FormatRule(), DigitRule()] def validate(self, cpf: str) -> bool: \"\"\" Validates the CPF by applying all the rules. Args: cpf (str): The CPF to be validated. Returns: bool: True if all rules are satisfied, False otherwise. \"\"\" return all(rule.validate(cpf) for rule in self.rules)","title":"CPFValidator"},{"location":"#app.cpf_validator.CPFValidator.__init__","text":"Initializes with a list of validation rules. Source code in app/cpf_validator.py def __init__(self): \"\"\"Initializes with a list of validation rules.\"\"\" self.rules = [FormatRule(), DigitRule()]","title":"__init__()"},{"location":"#app.cpf_validator.CPFValidator.validate","text":"Validates the CPF by applying all the rules. Parameters: cpf ( str ) \u2013 The CPF to be validated. Returns: bool ( bool ) \u2013 True if all rules are satisfied, False otherwise. Source code in app/cpf_validator.py def validate(self, cpf: str) -> bool: \"\"\" Validates the CPF by applying all the rules. Args: cpf (str): The CPF to be validated. Returns: bool: True if all rules are satisfied, False otherwise. \"\"\" return all(rule.validate(cpf) for rule in self.rules)","title":"validate()"},{"location":"#app.cpf_validator.DigitRule","text":"Validates the CPF digits. Methods: Name Description calculate_digit Calculates a CPF digit using a given factor. validate Validates the CPF digits. Source code in app/cpf_validator.py class DigitRule: \"\"\" Validates the CPF digits. Methods: calculate_digit: Calculates a CPF digit using a given factor. validate: Validates the CPF digits. \"\"\" @staticmethod def calculate_digit(cpf: str, factor: int) -> int: \"\"\" Calculates a CPF digit using a given factor. Args: cpf (str): The CPF number. factor (int): The factor used in the calculation. Returns: int: The calculated CPF digit. \"\"\" sum_digits = sum( int(digit) * factor for digit, factor in zip(cpf, range(factor, 1, -1)) ) return (sum_digits * 10) % 11 @staticmethod def validate(cpf: str) -> bool: \"\"\" Validates the CPF digits. Args: cpf (str): The CPF number. Returns: bool: True if the CPF digits are valid, False otherwise. \"\"\" digit1 = DigitRule.calculate_digit(cpf, 10) digit1 = 0 if digit1 == 10 else digit1 digit2 = DigitRule.calculate_digit(cpf[:9] + str(digit1), 11) digit2 = 0 if digit2 == 10 else digit2 return str(digit1) == cpf[9] and str(digit2) == cpf[10]","title":"DigitRule"},{"location":"#app.cpf_validator.DigitRule.calculate_digit","text":"Calculates a CPF digit using a given factor. Parameters: cpf ( str ) \u2013 The CPF number. factor ( int ) \u2013 The factor used in the calculation. Returns: int ( int ) \u2013 The calculated CPF digit. Source code in app/cpf_validator.py @staticmethod def calculate_digit(cpf: str, factor: int) -> int: \"\"\" Calculates a CPF digit using a given factor. Args: cpf (str): The CPF number. factor (int): The factor used in the calculation. Returns: int: The calculated CPF digit. \"\"\" sum_digits = sum( int(digit) * factor for digit, factor in zip(cpf, range(factor, 1, -1)) ) return (sum_digits * 10) % 11","title":"calculate_digit()"},{"location":"#app.cpf_validator.DigitRule.validate","text":"Validates the CPF digits. Parameters: cpf ( str ) \u2013 The CPF number. Returns: bool ( bool ) \u2013 True if the CPF digits are valid, False otherwise. Source code in app/cpf_validator.py @staticmethod def validate(cpf: str) -> bool: \"\"\" Validates the CPF digits. Args: cpf (str): The CPF number. Returns: bool: True if the CPF digits are valid, False otherwise. \"\"\" digit1 = DigitRule.calculate_digit(cpf, 10) digit1 = 0 if digit1 == 10 else digit1 digit2 = DigitRule.calculate_digit(cpf[:9] + str(digit1), 11) digit2 = 0 if digit2 == 10 else digit2 return str(digit1) == cpf[9] and str(digit2) == cpf[10]","title":"validate()"},{"location":"#app.cpf_validator.FormatRule","text":"Validates the CPF format. Methods: Name Description validate Checks the length and character repetition in the CPF. Source code in app/cpf_validator.py class FormatRule: \"\"\" Validates the CPF format. Methods: validate: Checks the length and character repetition in the CPF. \"\"\" @staticmethod def validate(cpf: str) -> bool: \"\"\"Checks the length and character repetition in the CPF. Args: cpf (str): The CPF to be validated. Returns: bool: True if the CPF format is valid, False otherwise. \"\"\" if len(cpf) != 11 or cpf == cpf[0] * len(cpf): return False return True","title":"FormatRule"},{"location":"#app.cpf_validator.FormatRule.validate","text":"Checks the length and character repetition in the CPF. Parameters: cpf ( str ) \u2013 The CPF to be validated. Returns: bool ( bool ) \u2013 True if the CPF format is valid, False otherwise. Source code in app/cpf_validator.py @staticmethod def validate(cpf: str) -> bool: \"\"\"Checks the length and character repetition in the CPF. Args: cpf (str): The CPF to be validated. Returns: bool: True if the CPF format is valid, False otherwise. \"\"\" if len(cpf) != 11 or cpf == cpf[0] * len(cpf): return False return True","title":"validate()"},{"location":"#tests-reference","text":"This module contains the tests for the cpf_validator module.","title":"Tests Reference"},{"location":"#tests.test_cpf_validator.format_cpf","text":"Formats a CPF (Brazilian identification number) by adding dots and dashes. Parameters: cpf ( str ) \u2013 The CPF to be formatted. Returns: str ( str ) \u2013 The formatted CPF with dots and dashes. Source code in tests/test_cpf_validator.py def format_cpf(cpf) -> str: \"\"\" Formats a CPF (Brazilian identification number) by adding dots and dashes. Args: cpf (str): The CPF to be formatted. Returns: str: The formatted CPF with dots and dashes. \"\"\" return f\"{cpf[:3]}.{cpf[3:6]}.{cpf[6:9]}-{cpf[9:]}\"","title":"format_cpf()"},{"location":"#tests.test_cpf_validator.generate_random_cpf","text":"Generate a random CPF (Cadastro de Pessoas F\u00edsicas) number. Returns: str ( str ) \u2013 A randomly generated CPF number. Source code in tests/test_cpf_validator.py def generate_random_cpf() -> str: \"\"\" Generate a random CPF (Cadastro de Pessoas F\u00edsicas) number. Returns: str: A randomly generated CPF number. \"\"\" return str(random.randint(int(10e10), int(10e11) - 1))","title":"generate_random_cpf()"},{"location":"#tests.test_cpf_validator.test_cpf_formatting","text":"Test the formatting of a CPF number. This function generates a random CPF number using the generate_random_cpf function, formats it using the format_cpf function, and then checks if the formatted CPF matches the expected format. The expected format of a CPF is \"XXX.XXX.XXX-XX\", where each X represents a digit of the CPF. Raises: AssertionError \u2013 If the formatted CPF does not match the expected format. Source code in tests/test_cpf_validator.py def test_cpf_formatting(): \"\"\" Test the formatting of a CPF number. This function generates a random CPF number using the `generate_random_cpf` function, formats it using the `format_cpf` function, and then checks if the formatted CPF matches the expected format. The expected format of a CPF is \"XXX.XXX.XXX-XX\", where each X represents a digit of the CPF. Raises: AssertionError: If the formatted CPF does not match the expected format. \"\"\" random_cpf = generate_random_cpf() formatted_cpf = format_cpf(random_cpf) assert ( formatted_cpf == f\"{random_cpf[:3]}.{random_cpf[3:6]}.{random_cpf[6:9]}-{random_cpf[9:]}\" )","title":"test_cpf_formatting()"},{"location":"#tests.test_cpf_validator.test_digit_rule","text":"Test the DigitRule class of the cpf_validator module. This function tests the validate() method of the DigitRule class by providing valid and invalid CPF numbers and asserting the expected results. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_digit_rule(): \"\"\" Test the DigitRule class of the cpf_validator module. This function tests the validate() method of the DigitRule class by providing valid and invalid CPF numbers and asserting the expected results. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" digit_rule = cpf_validator.DigitRule() # Teste com CPF v\u00e1lido assert digit_rule.validate(\"12345678909\") is True # Teste com CPF inv\u00e1lido (d\u00edgitos errados) assert digit_rule.validate(\"12345678900\") is False","title":"test_digit_rule()"},{"location":"#tests.test_cpf_validator.test_format_rule","text":"Test the FormatRule class of the cpf_validator module. This function tests the validate() method of the FormatRule class by providing valid and invalid CPF numbers as input and asserting the expected results. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_format_rule(): \"\"\" Test the FormatRule class of the cpf_validator module. This function tests the validate() method of the FormatRule class by providing valid and invalid CPF numbers as input and asserting the expected results. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" format_rule = cpf_validator.FormatRule() # Teste com CPF v\u00e1lido assert format_rule.validate(\"12345678909\") is True # Teste com CPF inv\u00e1lido (comprimento errado) assert format_rule.validate(\"1234567890\") is False","title":"test_format_rule()"},{"location":"#tests.test_cpf_validator.test_invalid_cpf_validation","text":"Test case to validate the behavior of the CPF class when an invalid CPF is provided. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_invalid_cpf_validation(): \"\"\" Test case to validate the behavior of the CPF class when an invalid CPF is provided. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" invalid_cpf = cpf_validator.CPF( \"123.456.789-00\", cpf_validator.CPFFormatter(), cpf_validator.CPFValidator() ) invalid_cpf.cpf = invalid_cpf.cpf[:-1] assert invalid_cpf.is_valid() is False","title":"test_invalid_cpf_validation()"},{"location":"#tests.test_cpf_validator.test_invalid_length_cpf_validation","text":"Test case to validate the behavior of CPF validation when the CPF has an invalid length. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_invalid_length_cpf_validation(): \"\"\" Test case to validate the behavior of CPF validation when the CPF has an invalid length. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" invalid_length_cpf = cpf_validator.CPF( \"123.456.789-00\", cpf_validator.CPFFormatter(), cpf_validator.CPFValidator() ) invalid_length_cpf.cpf = invalid_length_cpf.cpf[:-1] assert invalid_length_cpf.is_valid() is False","title":"test_invalid_length_cpf_validation()"},{"location":"#tests.test_cpf_validator.test_unexpected_formatting","text":"Test the CPF class of the cpf_validator module with unexpected formatting. This function tests the behavior of the CPF class when a CPF number with unexpected formatting is provided. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_unexpected_formatting(): \"\"\" Test the CPF class of the cpf_validator module with unexpected formatting. This function tests the behavior of the CPF class when a CPF number with unexpected formatting is provided. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" cpf_digits = \"12345678909\" positions = [i for i in range(11) if random.random() > 0.5] for i, position in enumerate(positions): cpf_entry = cpf_digits[:position + i] + random.choice([\".\", \"-\", \"+\", \" \"]) + cpf_digits[position + i:] cpf = cpf_validator.CPF(cpf_entry, cpf_validator.CPFFormatter(), cpf_validator.CPFValidator()) assert cpf.is_valid() is True","title":"test_unexpected_formatting()"},{"location":"#tests.test_cpf_validator.test_valid_cpf_validation","text":"Test case to validate a valid CPF. This test case creates a CPF object with a valid CPF number and checks if it is considered valid. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_valid_cpf_validation(): \"\"\" Test case to validate a valid CPF. This test case creates a CPF object with a valid CPF number and checks if it is considered valid. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" valid_cpf = cpf_validator.CPF( \"123.456.789-09\", cpf_validator.CPFFormatter(), cpf_validator.CPFValidator() ) assert valid_cpf.is_valid() is True","title":"test_valid_cpf_validation()"},{"location":"#tests.test_cpf_validator.test_valid_length_cpf_validation","text":"Test case to verify the validation of a CPF with a valid length. Raises: AssertionError \u2013 If the CPF object is not considered valid. Source code in tests/test_cpf_validator.py def test_valid_length_cpf_validation(): \"\"\" Test case to verify the validation of a CPF with a valid length. Raises: AssertionError: If the CPF object is not considered valid. \"\"\" valid_length_cpf = cpf_validator.CPF( \"123.456.789-09\", cpf_validator.CPFFormatter(), cpf_validator.CPFValidator() ) assert valid_length_cpf.is_valid() is True","title":"test_valid_length_cpf_validation()"}]}